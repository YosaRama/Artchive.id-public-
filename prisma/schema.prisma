// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// MODEL
model User {
  id                 Int                    @id @default(autoincrement())
  email              String                 @unique
  full_name          String
  slug               String                 @unique
  password           String?
  profile            Media?                 @relation("profile", fields: [profile_img_id], references: [id])
  profile_img_id     Int?                   @unique
  signature          Media?                 @relation("signature", fields: [signature_id], references: [id])
  signature_id       Int?                   @unique
  banner             Media?                 @relation("banner", fields: [banner_id], references: [id])
  banner_id          Int?                   @unique
  instagram_url      String?
  facebook_url       String?
  city               String?
  billing_address    String?
  address            String?
  biography          String?                @db.Text
  birth_date         DateTime?              @db.Date
  role               Role?
  provider           AuthProvider
  artwork            Artwork[]
  cart               Cart[]
  certificate        Certificate[]
  exhibitions        ArtistsOnExhibitions[]
  upload_by          Media[]                @relation("upload_by")
  status             Boolean
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt
  created_article    Article[]              @relation("article_created_by")
  updated_article    Article[]              @relation("article_updated_by")
  created_exhibition Exhibition[]           @relation("exhibition_created_by")
  updated_exhibition Exhibition[]           @relation("exhibition_updated_by")
  PaymentHistory     PaymentHistory[]
  Order              Order[]

  @@map("user")
}

model Artwork {
  id             Int                     @id @default(autoincrement())
  sku            String                  @unique
  artist         User                    @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artist_id      Int
  title          String
  slug           String                  @unique
  year           String
  material       String?
  description    String                  @db.Text
  type           Type
  media_cover    Media                   @relation("cover", fields: [media_cover_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media_cover_id Int
  height         Int
  width          Int
  price          String
  markup_price   String                  @default("0")
  status         ArtStatus
  approve        Boolean
  genre          Genre[]
  media_gallery  Media[]
  cart           Cart[]
  order          Order[]
  certificate    Certificate[]
  exhibitions    ArtworksOnExhibitions[]
  PaymentHistory PaymentHistory[]
  isDeleted      Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime?               @updatedAt

  @@map("artwork")
}

model Genre {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  artwork   Artwork[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("genre")
}

model Media {
  id                       Int          @id @default(autoincrement())
  filename                 String       @db.Text
  mimetype                 String
  url                      String       @unique
  medium_url               String?      @unique
  title                    String?      @db.Text
  description              String?      @db.Text
  created_at               DateTime     @default(now())
  updated_at               DateTime?    @updatedAt
  user_id                  User?        @relation("upload_by", references: [id], fields: [upload_by], onDelete: SetNull, onUpdate: Cascade)
  upload_by                Int?
  artwork                  Artwork[]
  artwork_cover            Artwork[]    @relation("cover")
  profile                  User?        @relation("profile")
  signature                User?        @relation("signature")
  banner                   User[]       @relation("banner")
  article_thumbnail        Article[]    @relation("article_thumbnail")
  exhibition_thumbnail     Exhibition?  @relation("exhibition_thumbnail")
  exhibition_media_gallery Exhibition[] @relation("exhibition_media_gallery")
  article_gallery          Article[]

  @@map("media")
}

model Cart {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id    Int
  artwork    Artwork   @relation(fields: [artwork_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  artwork_id Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  status     Boolean   @default(false)

  @@map("cart")
}

model Certificate {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  artwork   Artwork         @relation(fields: [artworkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artworkId Int
  serial_no String
  url       String
  type      CertificateType
  cretedAt  DateTime        @default(now())

  @@map("certificate")
}

model Article {
  id                Int           @id @default(autoincrement())
  title             String        @db.Text
  slug              String        @unique
  short_description String?       @db.Text
  content           String        @db.Text
  status            ArticleStatus @default(DRAFT)
  author            String        @db.Text
  thumbnail         Media         @relation("article_thumbnail", fields: [thumbnail_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thumbnail_id      Int
  gallery           Media[]
  created_by        User          @relation("article_created_by", fields: [created_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_id        Int
  created_at        DateTime      @default(now())
  updated_by        User?         @relation("article_updated_by", fields: [updated_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updated_id        Int?
  updated_at        DateTime?     @updatedAt

  @@map("article")
}

model Exhibition {
  id                Int                     @id @default(autoincrement())
  title             String                  @db.Text
  slug              String                  @unique
  description       String                  @db.Text
  short_description String?                 @db.Text
  start_date        DateTime
  end_date          DateTime
  organized_by      String                  @db.Text
  address           String?                 @db.Text
  lat               String?
  lng               String?
  start_time        String?                 @db.Text
  end_time          String?                 @db.Text
  catalogue_link    String?                 @db.Text
  thumbnail         Media                   @relation("exhibition_thumbnail", fields: [thumbnail_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thumbnail_id      Int                     @unique
  media_gallery     Media[]                 @relation("exhibition_media_gallery")
  artworks          ArtworksOnExhibitions[]
  artists           ArtistsOnExhibitions[]
  created_at        DateTime                @default(now())
  created_by_rel    User                    @relation("exhibition_created_by", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_by        Int
  updated_at        DateTime?               @updatedAt
  updated_by_rel    User?                   @relation("exhibition_updated_by", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updated_by        Int?

  @@map("exhibition")
}

model ArtistsOnExhibitions {
  exhibition    Exhibition @relation(fields: [exhibition_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exhibition_id Int
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       Int

  @@id([exhibition_id, user_id])
  @@unique([exhibition_id, user_id])
  @@map("artists_on_exhibitions")
}

model ArtworksOnExhibitions {
  artwork_id       Int
  artwork          Artwork    @relation(fields: [artwork_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exhibition_id    Int
  exhibition       Exhibition @relation(fields: [exhibition_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exhibition_price String?    @db.Text

  @@id([artwork_id, exhibition_id])
  @@unique([exhibition_id, artwork_id])
  @@map("artworks_on_exhibitions")
}

model PaymentHistory {
  id                 Int     @id @default(autoincrement())
  user_id            Int
  user               User    @relation(references: [id], fields: [user_id])
  artwork_id         Int
  artwork            Artwork @relation(references: [id], fields: [artwork_id])
  transaction_time   String  @db.Text
  transaction_status String
  transaction_id     String
  signature_key      String
  payment_type       String
  order_id           String
  gross_amount       String
  fraud_status       String
  currency           String
  merchant_id        String

  @@map("payment_history")
}

model Order {
  id                     Int         @id @default(autoincrement())
  order_id               String      @unique
  user                   User        @relation(references: [id], fields: [user_id])
  user_id                Int
  order_item             Artwork[]
  status                 OrderStatus @default(PENDING)
  fraud                  OrderFraud  @default(PENDING)
  total_amount           String
  transaction_time       DateTime
  shipping_address       String
  shipping_city          String
  shipping_country       String
  shipping_zip_code      String
  recipient_name         String
  recipient_phone_number String
  notes                  String?
  transaction_id         String?

  @@map("order")
}

// ENUM
enum Role {
  ARTIST
  GALLERY
  ADMIN
  COLLECTOR
}

enum Type {
  UNIQUE
  EDITION
}

enum ArtStatus {
  SOLD
  DRAFT
  PUBLISH
  EDIT
  EXHIBITION
}

enum Dimension {
  MAIN
  LARGE
  MEDIUM
  SMALL
}

enum CertificateType {
  MAIN
  EDITION
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
  FACEBOOK
}

enum ArticleStatus {
  PUBLISHED
  DRAFT
}

enum OrderStatus {
  PENDING
  PROCEED
  SHIPPING
  SUCCESS
}

enum OrderFraud {
  SETTLEMENT
  REFUND
  CANCEL
  PENDING
}
